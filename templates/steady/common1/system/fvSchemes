/*---------------------------------------------------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  1.0                                   |
|   \\  /    A nd           | Web:      http://www.openfoam.org               |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/

FoamFile
{
    version         2.0;
    format          ascii;
    class           dictionary;
    object          fvSchemes;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default         steadyState;
}

gradSchemes
{
    default             Gauss linear;
    snGradCorr(U)       Gauss linear;
    snGradCorr(p)       Gauss linear;
    snGradCorr(nuTilda) Gauss linear;
    snGradCorr(k)       Gauss linear;
    snGradCorr(epsilon) Gauss linear;
    snGradCorr(omega)   Gauss linear;
    grad(p)             cellLimited Gauss linear 1;
    grad(U)             cellLimited Gauss linear 1;
    grad(k)             cellLimited Gauss linear 1;
    grad(omega)         cellLimited Gauss linear 1;
    grad(nuTilda)       cellLimited Gauss linear 1;
    grad(epsilon)       cellLimited Gauss linear 1;
}

divSchemes
{
    default				Gauss linear;
    div(phi,U)       			bounded Gauss linearUpwind grad(U);
    div(phi,k)       			bounded Gauss linearUpwind grad(k);
    div(phi,epsilon) 			bounded Gauss linearUpwind grad(epsilon);
    div(phi,omega)   			bounded Gauss linearUpwind grad(omega);
    div(phi,nuTilda)    	 	bounded Gauss linearUpwind grad(nuTilda);
    div((nuEff*dev(grad(U).T()))) 	Gauss linear;
    div((nuEff*dev(T(grad(U)))))        Gauss linear;
    div((nuEff*dev2(T(grad(U)))))	Gauss linear;
}

laplacianSchemes
{
    default    				Gauss linear limited 0.3333;
    laplacian(nuEff,U) 			Gauss linear limited 0.3333;
    laplacian((1|A(U)),p) 		Gauss midPoint limited 0.3333;
    laplacian(1|A(U),p) 		Gauss midPoint limited 0.3333;
    laplacian(rAU,p)	 		Gauss midPoint limited 0.3333;
    laplacian((1|((1|(1|A(U)))-H(1))),p)  Gauss midPoint limited 0.3333;
    laplacian(DkEff,k) 			Gauss linear limited 0.3333;
    laplacian(DepsilonEff,epsilon) 	Gauss linear limited 0.3333;
    laplacian(DomegaEff,omega) 		Gauss linear limited 0.3333;
    laplacian(DnuTildaEff,nuTilda) 	Gauss linear limited 0.3333;
    laplacian(1,p)  			Gauss linear limited 0.3333;
}

interpolationSchemes
{
    default         linear;
    interpolate(U)  linear;
    interpolate(p)  linear;
    interpolate(HbyA)  linear;
    interpolate(((1|((1|(1|A(U)))-H(1)))-(1|A(U)))) midPoint;
}

snGradSchemes
{
    default         limited 0.3333;
}

/*fluxRequired
{
    default         no;
    p;
}*/



wallDist
{
    method meshWave;
}


// ************************************************************************* //	
