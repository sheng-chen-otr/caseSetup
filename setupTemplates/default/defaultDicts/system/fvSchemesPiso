/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  8
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      fvSchemes;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

ddtSchemes
{
    default backward;
}

d2dt2Schemes
{
}

gradSchemes
{
    default         Gauss linear;
	snGradCorr(U)       Gauss linear;
    snGradCorr(p)       Gauss linear;
    snGradCorr(nuTilda) Gauss linear;
    snGradCorr(k)       Gauss linear;
    snGradCorr(epsilon) Gauss linear;
    snGradCorr(omega)   Gauss linear;
    grad(nuTilda)   cellLimited Gauss linear 1;
    grad(U)         cellLimited Gauss linear 1;
	grad(p)             cellLimited Gauss linear 1;
	grad(omega)         cellLimited Gauss linear 1;
    grad(nuTilda)       cellLimited Gauss linear 1;
    grad(epsilon)       cellLimited Gauss linear 1;
	grad(k)             cellLimited Gauss linear 1;
}

divSchemes
{
    default         none;
    //div(phi,U)      	bounded Gauss linearFit 0.5;
    //div(phi,U)      	bounded Gauss limitWith quadraticLinearFit 0.5 filteredLinear2V 0.5 0;
    //div(phi,U)      	bounded Gauss filteredLinear2V 0.2 0;
    //div(phi,U)      	bounded Gauss TSlocalBlended upwind LUST unlimitedGrad(U);
    div(phi,U)      	bounded Gauss LUST unlimitedGrad(U);
    div(phi,k)      	bounded Gauss limitedLinear 1;
    div(phi,B)      	bounded Gauss limitedLinear 1;
    // div(phi,nuTilda) bounded Gauss TSlocalBlended upwind limitedLinear 1;
    div(phi,nuTilda) 	bounded Gauss limitedLinear 1;
	div(phi,epsilon) 	bounded Gauss linearUpwind grad(epsilon);
    div(phi,omega)   	bounded Gauss linearUpwind grad(omega);
    div(B)          	Gauss linear;
    div((nuEff*dev(grad(U).T()))) Gauss linear;
    div((nuEff*dev2(T(grad(U))))) Gauss linear;
}

laplacianSchemes
{
    default         Gauss linear corrected;

    default         none;

    //laplacian(nuEff,U) Gauss linear limited 0.33;
    //laplacian((1|A(U)),p) Gauss linear limited 0.33;
    //laplacian(rAU,p) Gauss linear limited 0.33;
    //laplacian(DnuTildaEff,nuTilda) Gauss linear limited 0.33;
    laplacian(diffusivity,cellMotionU)  Gauss linear limited 0.3333;
    laplacian(diffusivity,cellDisplacement)  Gauss linear limited 0.3333;
	
	laplacian(nuEff,U) 			Gauss linear limited 0.3333;
    laplacian((1|A(U)),p) 		Gauss midPoint limited 0.3333;
    laplacian(1|A(U),p) 		Gauss midPoint limited 0.3333;
    laplacian(rAU,p)	 		Gauss midPoint limited 0.3333;
    laplacian((1|((1|(1|A(U)))-H(1))),p)  Gauss midPoint limited 0.3333;
    laplacian(DkEff,k) 			Gauss linear limited 0.3333;
    laplacian(DepsilonEff,epsilon) 	Gauss linear limited 0.3333;
    laplacian(DomegaEff,omega) 		Gauss linear limited 0.3333;
    laplacian(DnuTildaEff,nuTilda) 	Gauss linear limited 0.3333;
    laplacian(1,p)  			Gauss linear limited 0.3333;

}

interpolationSchemes
{
    default         linear;
	interpolate(U)  linear;
    interpolate(p)  linear;
    interpolate(HbyA)  linear;
    interpolate(((1|((1|(1|A(U)))-H(1)))-(1|A(U)))) midPoint;
}

snGradSchemes
{
   default         limited 0.33;
}

wallDist
{
    method meshWave;
}




// ************************************************************************* //
