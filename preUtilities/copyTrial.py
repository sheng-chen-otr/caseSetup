import sys
import os
from shutil import copytree,ignore_patterns,copy
import glob
import time




print("###### copyTrial-v3.0 ######")
path = os.path.split(os.getcwd())[0]
case = os.path.split(os.getcwd())[1]
casesDir = os.getcwd()


#Check to see if in case folder
if not casesDir.endswith('CASES'):
	print(casesDir)
	sys.exit('Not in CASES folder!')

# total arguments
n = len(sys.argv)
if n < 2:
	print("No flags found! Please try again with the correct flags!")

keepMesh = False
keepRun = False #not active right now

for i in range(1, n):

	if sys.argv[i] == "-t" or sys.argv[i] == "-trial":

		sourceTrial = sys.argv[i+1]
		destTrial = sys.argv[i+2]
		
		continue
		continue

	elif sys.argv[i] == "-k" or sys.argv[i] == "-keep":
		print("Keeping mesh!")
		keepMesh = True

		continue

		
		

	elif sys.argv[i] == "":
		print("No arguments, please make sure to add arguments!!")
		continue

destPath = "%s/%s" % (casesDir,destTrial)
sourcePath = "%s/%s" % (casesDir,sourceTrial)

if not os.path.isdir(sourcePath):
	sys.exit("Source directory does not exist!") #checking if the source directory is correct and exists
elif os.path.isdir(destPath):
	sys.exit("Destination directory already exists!") #checking if the destination directory exists

def copyRequired(casesDir,sourcePath,destPath):

	print("Copying required files...")
	copytree(sourcePath,destPath,symlinks=True,ignore=ignore_patterns('*.eMesh', '*.obj','EnSight','*.save','fullCaseSetupDict','polyMesh','extendedFeatureEdgeMesh','processor*','log.*','*.foam','postProcessing','*.out','PyFoamHistory','*.csv','*.stl','*.png','*.pdf','postProReport')) #copying the required files by omitting the files that will be generated by openfoam
	print("Done!")


#Mesh copy function
def copyMesh(casesDir,sourcePath,destPath):

	sourceList = os.listdir(sourcePath) #listing all the files in the case

	processorArray = []	#initializing the array

	for file in sourceList:

		if file.startswith("processor"):
			processorArray.append(file) #add directory to name array if the directory starts with processor

	for processor in processorArray:
		print("Copying mesh to %s" % (processor))
		copytree("%s/%s/constant" % (sourcePath,processor),"%s/%s/constant" % (destPath,processor)) #copying the mesh in each processor over




copyRequired(casesDir,sourcePath,destPath)

if keepMesh == True:
    copyMesh(casesDir,sourcePath,destPath)
    os.system("cp %s/log.checkMesh %s/log.checkMesh" % (sourcePath,destPath))


print("Trial copied!")




	

		





